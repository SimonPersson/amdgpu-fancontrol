#!/bin/sh

HYSTERESIS=6000   # in mK
SLEEP_INTERVAL=1  # in s

# set 3 temps (in degrees C * 1000) and corresponding pwm values in descending order
TEMPS="60000:75000:90000"
PWMS="0:153:255"

# hwmon paths, hardcoded for one amdgpu card, adjust as needed
FILE_PWM=$(echo /sys/class/drm/card0/device/hwmon/hwmon?/pwm1)
FILE_FANMODE=$(echo /sys/class/drm/card0/device/hwmon/hwmon?/pwm1_enable)
FILE_TEMP=$(echo /sys/class/drm/card0/device/hwmon/hwmon?/temp1_input)
FILE_MAX_PWM=$(echo /sys/class/drm/card0/device/hwmon/hwmon?/pwm1_max)
MAX_PWM=$(cat "$FILE_MAX_PWM")

reset_on_exit() {
  echo "exiting, resetting fan to auto control..."
  set_fanmode 2
  exit 0
}

# always try to reset fans on exit
trap "reset_on_exit" INT TERM EXIT

# load configuration file if present
[ -f /etc/amdgpu-fancontrol.cfg ] && . /etc/amdgpu-fancontrol.cfg

if [ ! -f "$FILE_PWM" ] || [ ! -f "$FILE_FANMODE" ] || [ ! -f "$FILE_TEMP" ]; then
  echo "invalid hwmon files"
  exit 1
fi

# checking for privileges
if [ "$(id -u)" -ne 0 ]
then
  echo "Writing to sysfs requires privileges, relaunch as root"
  exit 1
fi

debug() {
  if [ "$DEBUG" = "true" ]; then
    echo "$1"
  fi
}

# set fan mode to max(0), manual(1) or auto(2)
set_fanmode() {
  debug "setting fan mode to $1"
  echo "$1" > "$FILE_FANMODE"
}

set_pwm() {
  NEW_PWM=$1
  OLD_PWM=$(cat "$FILE_PWM")

  debug "current pwm: $OLD_PWM, requested to set pwm to $NEW_PWM"
  if [ "$(cat "${FILE_FANMODE}")" -ne 1 ]
  then
    debug "Fanmode not set to manual."
    set_fanmode 1
  fi

  if [ -z "$TEMP_AT_LAST_PWM_CHANGE" ] || [ "$TEMP" -gt "$TEMP_AT_LAST_PWM_CHANGE" ] || [ "$(($(cat "$FILE_TEMP") + HYSTERESIS))" -le "$TEMP_AT_LAST_PWM_CHANGE" ]; then
    debug "current temp: $TEMP"
    debug "temp at last change was $TEMP_AT_LAST_PWM_CHANGE"
    debug "changing pwm to $NEW_PWM"
    echo "$NEW_PWM" > "$FILE_PWM"
    TEMP_AT_LAST_PWM_CHANGE=$(cat "$FILE_TEMP")
  else
    debug "not changing pwm, we just did at $TEMP_AT_LAST_PWM_CHANGE, next change when below $((TEMP_AT_LAST_PWM_CHANGE - HYSTERESIS))"
  fi
}

nth_elem() {
  set -f
  old_ifs=$IFS
  IFS=:
  elem=$2
  # shellcheck disable=2086
  set -- $1
  while [ "$#" -ne "$elem" ]; do
    shift
  done
  IFS=$old_ifs
  set +f
  printf '%s\n' "$1"
}

interpolate_pwm() {
  i=0
  TEMP=$(cat "$FILE_TEMP")

  debug "current temp: $TEMP"

  if [ "$TEMP" -le "$(nth_elem "$TEMPS" 3)" ]; then
    # below first point in list, set to min speed
    NEW_PWM="$(nth_elem "$PWMS" 3)"
    debug "setting pwm=$NEW_PWM"
    set_pwm "$(nth_elem "$PWMS" 3)"
    return
  elif [ "$TEMP" -gt "$(nth_elem "$TEMPS" 1)" ]; then
    # above last point in list, set to max speed
    set_pwm "$MAX_PWM"
    return
  fi

  for i in 3 2 1; do
    if [ "$TEMP" -gt "$(nth_elem "$TEMPS" "$i")" ]; then
      continue
    fi

    # interpolate linearly
    LOWERTEMP="$(nth_elem "$TEMPS" "$((i+1))")"
    HIGHERTEMP="$(nth_elem "$TEMPS" "$i")"
    LOWERPWM="$(nth_elem "$PWMS" "$((i+1))")"
    HIGHERPWM="$(nth_elem "$PWMS" "$i")"
    PWM=$(( ( ( TEMP - LOWERTEMP ) * ( HIGHERPWM - LOWERPWM ) / ( HIGHERTEMP - LOWERTEMP ) ) + LOWERPWM ))
    debug "interpolated pwm value for temperature $TEMP is: $PWM"
    set_pwm "$PWM"
    return
  done
}

run_daemon() {
  while :; do
    interpolate_pwm
    debug
    sleep $SLEEP_INTERVAL
  done
}

# set fan control to manual
set_fanmode 1

# finally start the loop
run_daemon

